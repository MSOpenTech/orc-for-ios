/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSSampleServiceFetchers.h"


/** Implementation for MSSampleServiceSampleEntityOperations
 *
 */
@implementation MSSampleServiceSampleEntityOperations


- (instancetype)initOperationWithUrl:(NSString *)urlComponent parent:(id<MSOrcExecutable>)parent {
 
    return [super initOperationWithUrl:urlComponent parent:parent];
}

- (void)twoParamsActionsFirstIsEntityTypeWithAnEntity:(MSSampleServiceSampleEntity *)anEntity booleanParams:(bool)booleanParams callback:(void (^)(int, MSOrcError*))callback {


      NSString *anEntityString = [MSOrcObjectizer deobjectizeToString:anEntity];

  NSString *booleanParamsString = [MSOrcObjectizer stringFromBool:booleanParams];

    return [self twoParamsActionsFirstIsEntityTypeRawWithAnEntity:anEntityString booleanParams:booleanParamsString callback:^(NSString *returnValue, MSOrcError *e) {
       
       if (e == nil) {
            int result = (int)[MSOrcObjectizer intFromString:returnValue];
            callback(result, e);
        } 
        else {

            callback((int)[returnValue integerValue], e);
        }
    }];    
    
        
}

- (void)twoParamsActionsFirstIsEntityTypeRawWithAnEntity:(NSString *)anEntity booleanParams:(NSString *)booleanParams callback:(void (^)(NSString *, MSOrcError*))callback {
        
    id<MSOrcRequest> request = [super.resolver createOrcRequest];
    
    NSArray *parameters = [[NSArray alloc] initWithObjects: [[NSDictionary alloc] initWithObjectsAndKeys:  anEntity, @"AnEntity", booleanParams, @"BooleanParams", nil ] , nil];
    NSData* payload = [[MSOrcBaseContainer generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];
    [request setContent:payload];
    
    [request setVerb:HTTP_VERB_POST];
	 	[request.url appendPathComponent:@"Microsoft.SampleService.TwoParamsActionsFirstIsEntityType"];
     	
    return [super orcExecuteRequest:request callback:^(id<MSOrcResponse> response, MSOrcError *e) {
        
		if (e == nil) {
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], e);
        }
        else {

            callback([[NSString alloc] initWithFormat:@"%d", response.status], e);
        }
    }];
    
    }
- (void)twoParamsActionsFirstIsComplexTypeWithComplexType:(MSSampleServiceSampleComplexType *)complexType booleanParams:(bool)booleanParams callback:(void (^)(int, MSOrcError*))callback {


      NSString *complexTypeString = [MSOrcObjectizer deobjectizeToString:complexType];

  NSString *booleanParamsString = [MSOrcObjectizer stringFromBool:booleanParams];

    return [self twoParamsActionsFirstIsComplexTypeRawWithComplexType:complexTypeString booleanParams:booleanParamsString callback:^(NSString *returnValue, MSOrcError *e) {
       
       if (e == nil) {
            int result = (int)[MSOrcObjectizer intFromString:returnValue];
            callback(result, e);
        } 
        else {

            callback((int)[returnValue integerValue], e);
        }
    }];    
    
        
}

- (void)twoParamsActionsFirstIsComplexTypeRawWithComplexType:(NSString *)complexType booleanParams:(NSString *)booleanParams callback:(void (^)(NSString *, MSOrcError*))callback {
        
    id<MSOrcRequest> request = [super.resolver createOrcRequest];
    
    NSArray *parameters = [[NSArray alloc] initWithObjects: [[NSDictionary alloc] initWithObjectsAndKeys:  complexType, @"ComplexType", booleanParams, @"BooleanParams", nil ] , nil];
    NSData* payload = [[MSOrcBaseContainer generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];
    [request setContent:payload];
    
    [request setVerb:HTTP_VERB_POST];
	 	[request.url appendPathComponent:@"Microsoft.SampleService.TwoParamsActionsFirstIsComplexType"];
     	
    return [super orcExecuteRequest:request callback:^(id<MSOrcResponse> response, MSOrcError *e) {
        
		if (e == nil) {
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], e);
        }
        else {

            callback([[NSString alloc] initWithFormat:@"%d", response.status], e);
        }
    }];
    
    }
- (void)twoParamsActionsFirstIsCollectionEntityTypeWithCollectionType:(MSSampleServiceSampleEntity *)collectionType booleanParams:(bool)booleanParams callback:(void (^)(int, MSOrcError*))callback {


      NSString *collectionTypeString = [MSOrcObjectizer deobjectizeToString:collectionType];

  NSString *booleanParamsString = [MSOrcObjectizer stringFromBool:booleanParams];

    return [self twoParamsActionsFirstIsCollectionEntityTypeRawWithCollectionType:collectionTypeString booleanParams:booleanParamsString callback:^(NSString *returnValue, MSOrcError *e) {
       
       if (e == nil) {
            int result = (int)[MSOrcObjectizer intFromString:returnValue];
            callback(result, e);
        } 
        else {

            callback((int)[returnValue integerValue], e);
        }
    }];    
    
        
}

- (void)twoParamsActionsFirstIsCollectionEntityTypeRawWithCollectionType:(NSString *)collectionType booleanParams:(NSString *)booleanParams callback:(void (^)(NSString *, MSOrcError*))callback {
        
    id<MSOrcRequest> request = [super.resolver createOrcRequest];
    
    NSArray *parameters = [[NSArray alloc] initWithObjects: [[NSDictionary alloc] initWithObjectsAndKeys:  collectionType, @"CollectionType", booleanParams, @"BooleanParams", nil ] , nil];
    NSData* payload = [[MSOrcBaseContainer generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];
    [request setContent:payload];
    
    [request setVerb:HTTP_VERB_POST];
	 	[request.url appendPathComponent:@"Microsoft.SampleService.TwoParamsActionsFirstIsCollectionEntityType"];
     	
    return [super orcExecuteRequest:request callback:^(id<MSOrcResponse> response, MSOrcError *e) {
        
		if (e == nil) {
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], e);
        }
        else {

            callback([[NSString alloc] initWithFormat:@"%d", response.status], e);
        }
    }];
    
    }
- (void)twoParamsActionsFirstIsCollectionComplexTypeWithCollectionType:(MSSampleServiceSampleComplexType *)collectionType booleanParams:(bool)booleanParams callback:(void (^)(int, MSOrcError*))callback {


      NSString *collectionTypeString = [MSOrcObjectizer deobjectizeToString:collectionType];

  NSString *booleanParamsString = [MSOrcObjectizer stringFromBool:booleanParams];

    return [self twoParamsActionsFirstIsCollectionComplexTypeRawWithCollectionType:collectionTypeString booleanParams:booleanParamsString callback:^(NSString *returnValue, MSOrcError *e) {
       
       if (e == nil) {
            int result = (int)[MSOrcObjectizer intFromString:returnValue];
            callback(result, e);
        } 
        else {

            callback((int)[returnValue integerValue], e);
        }
    }];    
    
        
}

- (void)twoParamsActionsFirstIsCollectionComplexTypeRawWithCollectionType:(NSString *)collectionType booleanParams:(NSString *)booleanParams callback:(void (^)(NSString *, MSOrcError*))callback {
        
    id<MSOrcRequest> request = [super.resolver createOrcRequest];
    
    NSArray *parameters = [[NSArray alloc] initWithObjects: [[NSDictionary alloc] initWithObjectsAndKeys:  collectionType, @"CollectionType", booleanParams, @"BooleanParams", nil ] , nil];
    NSData* payload = [[MSOrcBaseContainer generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];
    [request setContent:payload];
    
    [request setVerb:HTTP_VERB_POST];
	 	[request.url appendPathComponent:@"Microsoft.SampleService.TwoParamsActionsFirstIsCollectionComplexType"];
     	
    return [super orcExecuteRequest:request callback:^(id<MSOrcResponse> response, MSOrcError *e) {
        
		if (e == nil) {
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], e);
        }
        else {

            callback([[NSString alloc] initWithFormat:@"%d", response.status], e);
        }
    }];
    
    }

@end


