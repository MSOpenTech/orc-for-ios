/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSSampleServiceModels.h"



/** Implementation for MSSampleServiceSampleEntity
 *
 */
@implementation MSSampleServiceSampleEntity


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"DisplayName", @"displayName", @"entityKey", @"entityKey", @"nestedSampleEntity", @"nestedSampleEntity", @"Content", @"content", @"Navigations", @"navigations", @"Items", @"items", @"nestedSampleEntityCollection", @"nestedSampleEntityCollection", @"Id", @"_id", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.SampleService.SampleEntity";
        
        
		_navigations = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_items = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_nestedSampleEntityCollection = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_displayName = [dic objectForKey: @"DisplayName"] != nil ? [[dic objectForKey: @"DisplayName"] copy] : _displayName;
		_entityKey = [dic objectForKey: @"entityKey"] != nil ? [[dic objectForKey: @"entityKey"] copy] : _entityKey;
		_nestedSampleEntity = [dic objectForKey: @"nestedSampleEntity"] != nil ? [[MSSampleServiceSampleEntity alloc] initWithDictionary: [dic objectForKey: @"nestedSampleEntity"]] : _nestedSampleEntity;
		_content = [dic objectForKey: @"Content"] != nil ? nil/*NSStream*/ : _content;

        if([dic objectForKey: @"Navigations"] != [NSNull null]){
            _navigations = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Navigations"] count]];
            
            for (id object in [dic objectForKey: @"Navigations"]) {
                [_navigations addObject:[[MSSampleServiceAnotherEntity alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"Items"] != [NSNull null]){
            _items = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Items"] count]];
            
            for (id object in [dic objectForKey: @"Items"]) {
                [_items addObject:[[MSSampleServiceItem alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"nestedSampleEntityCollection"] != [NSNull null]){
            _nestedSampleEntityCollection = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"nestedSampleEntityCollection"] count]];
            
            for (id object in [dic objectForKey: @"nestedSampleEntityCollection"]) {
                [_nestedSampleEntityCollection addObject:[[MSSampleServiceSampleEntity alloc] initWithDictionary: object]];
            }
        }
        
		self._id = [dic objectForKey: @"Id"] != nil ? [[dic objectForKey: @"Id"] copy] : self._id;

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = [self.displayName copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"DisplayName"];}
	{id curVal = [self.entityKey copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"entityKey"];}
	{id curVal = [self.nestedSampleEntity toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"nestedSampleEntity"];}
	{id curVal = nil/*NSStream*/; if (curVal!=nil) [dic setValue: curVal forKey: @"Content"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"Navigations"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"Items"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"nestedSampleEntityCollection"];}
	{id curVal = [self._id copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"Id"];}
    [dic setValue: @"#Microsoft.SampleService.SampleEntity" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"DisplayName"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"DisplayName"];
    }
    }
	{id curVal = self.entityKey;
    if([self.updatedValues containsObject:@"entityKey"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"entityKey"];
    }
    }
	{id curVal = self.nestedSampleEntity;
    if([self.updatedValues containsObject:@"nestedSampleEntity"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"nestedSampleEntity"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"nestedSampleEntity"];
            }
        
            }}
	{id curVal = self.content;
    if([self.updatedValues containsObject:@"Content"])
    {
        [dic setValue: curVal==nil?[NSNull null]:nil/*NSStream*/ forKey: @"Content"];
    }
    }
	{id curVal = self.navigations;
    if([self.updatedValues containsObject:@"Navigations"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Navigations"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.items;
    if([self.updatedValues containsObject:@"Items"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Items"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.nestedSampleEntityCollection;
    if([self.updatedValues containsObject:@"nestedSampleEntityCollection"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"nestedSampleEntityCollection"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"Id"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Id"];
    }
    }
    return dic;
}


/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"DisplayName"];
}
       
/** Setter implementation for property entityKey
 *
 */
- (void) setEntityKey: (NSString *) value {
    _entityKey = value;
    [self valueChangedFor:@"entityKey"];
}
       
/** Setter implementation for property nestedSampleEntity
 *
 */
- (void) setNestedSampleEntity: (MSSampleServiceSampleEntity *) value {
    _nestedSampleEntity = value;
    [self valueChangedFor:@"nestedSampleEntity"];
}
       
/** Setter implementation for property content
 *
 */
- (void) setContent: (NSStream *) value {
    _content = value;
    [self valueChangedFor:@"Content"];
}
       
/** Setter implementation for property navigations
 *
 */
- (void) setNavigations: (NSMutableArray *) value {
    _navigations = value;
    [self valueChangedFor:@"Navigations"];
}
       
/** Setter implementation for property items
 *
 */
- (void) setItems: (NSMutableArray *) value {
    _items = value;
    [self valueChangedFor:@"Items"];
}
       
/** Setter implementation for property nestedSampleEntityCollection
 *
 */
- (void) setNestedSampleEntityCollection: (NSMutableArray *) value {
    _nestedSampleEntityCollection = value;
    [self valueChangedFor:@"nestedSampleEntityCollection"];
}
       

@end
